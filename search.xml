<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2023.10.18</title>
      <link href="/2023/10/18/2023-10-18/"/>
      <url>/2023/10/18/2023-10-18/</url>
      
        <content type="html"><![CDATA[<p>c中计算一个数的三分之一次幂可以使用两种函数<br>1.使用库函数：cbrt()<br>C 语言提供了 math.h 头文件中的 cbrt 函数，可以直接计算一个数的立方根。<br>你可以使用该函数来计算三分之一次幂。<br>示例代码如下：</p><p>#include &lt;stdio.h&gt;<br>#include &lt;math.h&gt;</p><p>int main() {<br>    double num = 8.0;<br>    double result = cbrt(num);<br>    printf(“The cube root of %.2f is %.2f\n”, num, result);<br>    return 0;<br>}</p><p>##################################################################</p><p>2.使用 pow 函数：<br>pow 函数可以计算一个数的任意次幂。对于计算三分之一次幂，可以将指数设置为 1.0/3.0。<br>示例代码如下：<br>#include &lt;stdio.h&gt;<br>#include &lt;math.h&gt;</p><p>int main() {<br>    double num = 8.0;<br>    double result = pow(num, 1.0 / 3.0);<br>    printf(“The cube root of %.2f is %.2f\n”, num, result);<br>    return 0;<br>}</p><p>################################################################</p><p>还有一个比较好用的技巧便是强制转换数据类型<br>int num1;<br>double num2=(double)num1;<br>这样便成功将int型转化为了double型了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>20231014 study</title>
      <link href="/2023/10/14/20231014study/"/>
      <url>/2023/10/14/20231014study/</url>
      
        <content type="html"><![CDATA[<p>递归算法，我个人的感觉类似于数学当中找数学表达式以及找规律，找到了解决问题的表达式和规律，<br>那么递归也就很好解决。<br>通过下面这个c语言的程序，体会会更明显<br>#include&lt;stdio.h&gt;<br>void calculate1(int a)<br>{<br>    int i,remember;<br>    int num[10];<br>    for(i=0;i&lt;10;i++)<br>    {<br>        num[i]=a%10;<br>        remember=i;<br>        if(a&lt;10)<br>        {<br>            break;<br>        }<br>        a=a/10;<br>    }<br>    for(int j=0;j&lt;=remember;j++)<br>    {<br>        printf(“%d “,num[remember-j]);<br>    }<br>}</p><p>void calculate2(int a)<br>{<br>    if(a&gt;=10)<br>    {<br>        calculate2(a/10);<br>    }<br>    printf(“%d “,a%10);<br>}</p><p>int main()<br>{<br>    int a=20456;<br>    calculate1(a);<br>    printf(“\n”);<br>    calculate2(a);<br>    return 0;<br>}</p><p>上面的代码的功能是将一个整数的各个位的数字分别输出<br>其中calculate1这个函数便是最基础的循环操作<br>可以看出来，在for循环中，我们首先是从i=0开始，然后逐渐累加最后得出答案。<br>在calculate2这个函数中，便是使用了递归这个算法，非常简洁但也难懂。<br>calculate2（a/10）这一段话的意思便是将a除以10.然后将剩下的部分继续代入其中计算，<br>以此来达到目的<br>递归结束条件便是当a小于10，此时只会输出a，不会再递归</p><p>######################################################################</p><p>第二个例子:阶乘<br>#include&lt;stdio.h&gt;<br>int factorial(int a) //阶乘<br>{<br>    if(a&lt;=1)<br>    {<br>        return 1;<br>    }<br>    return a=a*factorial(a-1);<br>}</p><p>int main()<br>{<br>    int a=5;<br>    int b;<br>    b=factorial(a);<br>    printf(“%d”,b);<br>    return 0;<br>}</p><p>############################################################################</p><p>第三个例子:斐波那契数列</p><p>#include&lt;stdio.h&gt;<br>int Fibonacci(int a)<br>{<br>    if(a&lt;=2)<br>    {<br>        return 1;<br>    }<br>    return Fibonacci(a-1)+Fibonacci(a-2);<br>}</p><p>int main()<br>{<br>    int a=6;<br>    int b;<br>    b=Fibonacci(a);<br>    printf(“%d”,b);<br>    return 0;<br>}</p><p>/*<br>当你写 return Fibonacci(a) = Fibonacci(a-1) + Fibonacci(a-2); 时，编译器会将这个表达式解析为：</p><p>调用 Fibonacci(a) 函数的结果；<br>将之前调用 Fibonacci(a) 函数返回的值赋值给 Fibonacci(a-1) + Fibonacci(a-2)。<br>显然这个表达式不符合语法规则，因为把一个值赋给一个表达式是没有任何意义的。所以编译器会报错。</p><p>换成正确的表达式 return Fibonacci(a-1) + Fibonacci(a-2);，<br>就表示该函数的返回值是调用 Fibonacci(a-1) 和 Fibonacci(a-2) 的结果之和。<br>而递归的终止条件是 a==1 或 a==2，这个时候直接返回1即可。</p><p>意思是正确的，只是在表达上出了一些问题。应该使用递归函数来计算斐波那契数列的值，<br>而不应该把递归函数的结果赋值给另一个表达式。<br>*/</p><p>#############################################################<br>第四个例子:计算数组中数字的和</p><p>#include&lt;stdio.h&gt;<br>int calculate(int *a,int size)<br>{<br>    if(size==0)<br>    {<br>        return 0;<br>    }<br>    return a[0]+calculate(a+1,size-1);<br>}</p><p>int main()<br>{<br>    int a[5]={1,2,3,4,5};<br>    int size=sizeof(a)/sizeof(a[0]);<br>    int end=calculate(a,size);<br>    printf(“%d”,end);<br>    return 0;<br>}</p><p>/*在 calculate函数中，我们传入一个指向数组的指针 <em>a和数组的大小 size。<br>如果 size 等于 0，则返回和的初始值 0。否则，将数组的第一个元素与后续部分<br>（通过指针 a+1 和 size-1 缩小了数组的范围）的和相加，然后递归调用该函数计算剩余部分的和。<br>为什么能这样捏？这是因为在c中这个指向数组的指针实际上指向的是数组起始位置的地址，<br>因而当</em>a+1之后，指针就会移动到数组的下一位了</p><p>#####################################################################################<br>###还有一个非常有用的地方，如果不用循环想找到数组的大小很麻烦<br>###但是，在这代码中，我们使用sizeof 来计算整数数组a中元素的个数<br>###具体来说，sizeof(array) 返回整个数组的字节数，而 sizeof(a[0]) 返回数组元素的字节数<br>###因此，通过将整个数组的字节数除以元素字节数，可以得到数组的元素个数<br>###这个技巧可以很方便地避免硬编码数组大小，特别是当数组的大小在程序运行时可能发生变化<br>#####################################################################################</p><p>第五个例子:判断字符串左右两边字母是否完全相同</p><p>#include&lt;stdio.h&gt;</p><p>void compareA(char a[],int size,int start)//老函数<br>{<br>    if(size==start||size==start-1)<br>    {<br>        if(a[size]==a[start])<br>        {<br>            printf(“yes\n”);<br>            return;//防止死循环<br>        }<br>        else<br>        {<br>            printf(“no\n”);<br>            return;<br>        }<br>    }<br>    if(a[size]!=a[start])<br>    {<br>        printf(“no\n”);<br>        return;<br>    }<br>    compareA(a,size-1,start+1);<br>}</p><p>void compareB(char a[],int size,int start)//新函数<br>{<br>    if(size&lt;=start)<br>    {<br>        printf(“yes\n”);<br>        return;<br>    }<br>    if(a[size]!=a[start])<br>    {<br>        printf(“no\n”);<br>        return;<br>    }<br>    compareB(a,size-1,start+1);<br>}</p><p>/*判断条件是 start &gt;= size，而不是你之前写的 size==start||size==start-1，这是因为：<br>当字符串长度为奇数时，比如 “madam”，中心字符是对称的，所以在比较到中心字符时，不需要进行实际比较。<br>因此，在长度为奇数的回文字符串中，最后一次比较实际上是比较了 2 个相同字符，即开始位置和结束位置重合时的字符，<br>也就是说，start 位置和 size 位置指向同一个字符。因此，当 start 大于等于 size 时，<br>我们可以认为整个字符串已经完成了比较，不需要继续递归下去。<br>同时返回 “yes” 表示字符串是回文的。<br>当字符串长度为偶数时，比如 “apple”，不存在中心字符，所有字符都必须进行比较。<br>因此，在长度为偶数的回文字符串中，最后一次比较实际上是比较了 2 个不同的字符，<br>即开始位置和结束位置重合时的字符。因此，如果我们按照你之前写的方法，判断条件为 size==start||size==start-1，<br>那么当递归到最后一步时，会输出 “no”，而不是 “yes”。因此，为了处理长度为偶数的回文字符串，<br>我们需要使用 start &gt;= size 来判断是否完成比较。<br>*/</p><p>void calculate(char a[],int size)<br>{<br>    printf(“老函数的结果为:\n”);<br>    compareA(a,size-1,0);<br>    printf(“新函数的结果为:\n”);<br>    compareB(a,size-1,0);<br>}</p><p>int main()<br>{<br>    char ch1[5]={‘m’,’a’,’d’,’a’,’m’};<br>    char ch2[5]={‘a’,’b’,’p’,’e’,’a’};<br>    int size1=sizeof(ch1)/sizeof(ch1[0]);<br>    int size2=sizeof(ch2)/sizeof(ch2[0]);<br>    calculate(ch1,size1);<br>    calculate(ch2,size2);<br>    return 0;<br>}</p><p>#######################################################################################</p><p>第六个例子：汉诺塔问题</p><p>#include&lt;stdio.h&gt;<br>void hanoi(int n,char a,char b,char c)//a为移动起始地，b为移动中转地，c为目的地<br>{<br>    if(n&gt;1)<br>    {<br>        hanoi(n-1,a,c,b);<br>        printf(“%c-&gt;%c\n”,a,c);<br>        hanoi(n-1,b,a,c);<br>    }<br>    else<br>    {<br>        printf(“%c-&gt;%c\n”,a,c);<br>    }<br>}</p><p>int main()<br>{<br>    char a=’A’;<br>    char b=’B’;<br>    char c=’C’;<br>    printf(“third\n”);<br>    hanoi(3,a,b,c);<br>    return 0;<br>}</p><p>/<em>汉诺塔问题，详情可见<a href="http://t.csdnimg.cn/2dBAx">http://t.csdnimg.cn/2dBAx</a> 十分详细</em>/<br>不过本人在做汉诺塔时碰到了一个问题，如果我分别令n为1，2，3，4，5，<br>并在n变换为不同值的时候在终端输出提示，按照我上面代码的逻辑应该没有任何问题。<br>但在实际中输出结果先是出现了一大段的空白，随后直接输出了结果，<br>但这结果中却并未输出提示语句，然而我提示语句是放在main函数中。询问gpt老师之后得到答复为:</p><pre><code>printf 函数的输出结果和程序缓存区域之间的关系。具体来说，很多编译器都会有输出缓存的概念，如果没有手动刷新缓存区，这些输出内容就不会被及时地显示在终端中。这就解释了你所说的“大量的空白”问题。</code></pre><p>针对这个问题，你可以手动刷新缓存区使用 fflush(stdout) 函数强制将缓冲区中的内容输出到终端上。在你的代码中，在 printf 输出语句之后调用 fflush(stdout) 语句，就能及时显示输出结果了。</p><p>然而按照gpt老师说法改却没有一点用，这令我非常疑惑</p><p>##########################################################################</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>20231010</title>
      <link href="/2023/10/10/20231010/"/>
      <url>/2023/10/10/20231010/</url>
      
        <content type="html"><![CDATA[<p>今日份学习成果：<br>java:<br>java的输入首先要有类似于和c语言一样的头文件:<br>import java.until.Scanner;<br>像带import这样的语句放置位置需要在文件顶端</p><p>接下来便是:<br>Scanner scanner=new Scanner(System.in);<br>int num=scanner.nextInt();//输入整数<br>double floatNum=scanner.nexDouble();//输入浮点数<br>char ch=scanner.next().charAt(0);//输入单个字符（此处的0指的是输出第0个位置的字符，如果想输出一个字符串中某一位置的字符，那么将0换成对应位置的值即可）<br>String input=scanner.next();//输入字符串<br>输入数组:<br>int[] nums=new int[length];//定义数组,此处的length可以随便赋值<br>for(int i=0;i&lt;length;i++)<br>{<br>    nums[i]=scanner.nextInt();//输入数组，此处也可以仿照上面进行局部修改从而输入不同类型的数组<br>}<br>输出数组的方法：<br>int[] nums={1,2,3,4,5};<br>System.out.println(Arrays.to String(nums));//输出字符串只需将int改为string即可</p><p>关于输出的方法:<br>int num=2;<br>System.out.println(“a” +num);//结果为:a2并会换行<br>System.out.print(“a” +num);//结果为:a2不换行<br>System.out.print(“\n”);//结果换行<br>System.out.printf(“a%d\n”,num);//结果为:a2换行</p><p>c语言:<br>结构体的定义:<br>#include&lt;sdtio.h&gt;<br>struct a{<br>    char name[10];<br>    int x;<br>};</p><p>//下面结构体数组的定义的方法之一</p><p>int main()<br>{<br>    struct a A[2];<br>}</p><p>…<br>数组比较的方法:<br>eg:</p><p>char a[3];<br>char b[3];<br>strcmp(a,b)==0;//相同则为0<br>//头文件为string.h</p><p>今天写的内容:<br>java：</p><p>package study;<br>import java.util.Arrays;<br>import java.util.Scanner;</p><p>public class study {</p><pre><code>public static void main(String[] args) {    Scanner scanner=new Scanner(System.in);    System.out.println("请输入一个整数:");    int num=scanner.nextInt();    System.out.println("输入的整数为" +num);    System.out.print("请输入一个浮点数\n");    double floatNum=scanner.nextDouble();    System.out.print("你输入的浮点数为:" +floatNum);    System.out.print("\n");    System.out.printf("请输入你想输入数组的大小：%n");    int length=scanner.nextInt();    int[] arr=new int[length];    System.out.printf("请输入数组的数:%n");    for(int i=0;i&lt;length;i++) {        arr[i]=scanner.nextInt();    }    System.out.print("数组内的数为:\n" );    System.out.println(Arrays.toString(arr));    System.out.println("请输入一个字符:");    char ch=scanner.next().charAt(0);    System.out.println("输入的字符为: " +ch);    System.out.println("请输入一个大小在4个字母以内的字符串:");    String input=scanner.next();    char ch1=input.charAt(2);    System.out.println("你输入的字符串为: "+input);    System.out.println("其中字符串的第三位是: "+ch1);}</code></pre><p>}</p><p>c:</p><p>#include&lt;stdio.h&gt;<br>#include &lt;string.h&gt;<br>struct system{<br>    char name[20];//型号<br>    char size[20];//尺寸<br>    int price;//价格<br>    char disposition[20];//配置<br>};</p><p>int main()<br>{<br>    int a,remember1=0,remember2=0,number1=0,number2=0;<br>    char compare[20]={“xiaomi”};<br>    printf(“请输入你带来多少组数据:\n”);<br>    scanf(“%d”,&amp;a);<br>    struct system Systems[a];<br>    printf(“请输入数据:\n”);<br>    printf(“型号(字符型数组) 尺寸(字符型数组) 价格(整型) 配置(字符型数组)\n”);<br>    for(int i=0;i&lt;a;i++)<br>    {<br>        printf(“第%d次输入:\n”,i+1);<br>        scanf(“%s %s %d %s”,&amp;Systems[i].name,&amp;Systems[i].size,&amp;Systems[i].price,&amp;Systems[i].disposition);<br>        if(strcmp(Systems[i].name, compare)==0)<br>        {<br>            remember1=remember1+Systems-&gt;price;<br>            number1=number1+1;<br>        }<br>        else<br>        {<br>            remember2=remember2+Systems-&gt;price;<br>            number2=number2+1;<br>        }<br>    }<br>    printf(“最终，你所存入的数据如下：\n”);<br>    for(int j=0;j&lt;a;j++)<br>    {<br>        printf(“这是仓库中存入第%d个手机\n型号为:%s\n尺寸为:%s\n价格为:%d\n配置为:%s\n”,j+1,Systems[j].name,Systems[j].size,Systems[j].price,Systems[j].disposition);<br>    }<br>    printf(“仓库中xiaomi型号共有%d台，总价为%d元\n”,number1,remember1);<br>    printf(“仓库中huawei型号共有%d台，总价为%d元\n”,number2,remember2);<br>    return 0;<br>}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>水一下^-^</title>
      <link href="/2023/06/02/new/"/>
      <url>/2023/06/02/new/</url>
      
        <content type="html"><![CDATA[<p>啊哈，今天对我的小破站进行了比较大的更改，加了不少图片以及一些功能<br>后续评论也将加入其中^-^</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一些个人向的分享（还在不断补充）</title>
      <link href="/2023/05/28/my-share-to-me/"/>
      <url>/2023/05/28/my-share-to-me/</url>
      
        <content type="html"><![CDATA[<p>闲来无事挂一些我自己收藏的一些东西<br>主要是担心放的太杂自己找不到了^-^<br>以下均在天翼云盘（百度网盘去死）</p><hr><p>智乃酱萌图：<a href="https://cloud.189.cn/t/vEbEJfzQzIby">https://cloud.189.cn/t/vEbEJfzQzIby</a> 访问码：7x8b<br>亚托莉Q版：<a href="https://cloud.189.cn/t/NNbAraze2mqq">https://cloud.189.cn/t/NNbAraze2mqq</a>  访问码：1gue</p><hr><p>点兔中我比较喜欢的音乐：<a href="https://cloud.189.cn/t/N3YzuuJnYFVj">https://cloud.189.cn/t/N3YzuuJnYFVj</a> 访问码：gp8n</p><hr><p>其他等待我后续补充^-^</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>二次测试</title>
      <link href="/2023/05/27/twice-test/"/>
      <url>/2023/05/27/twice-test/</url>
      
        <content type="html"><![CDATA[<p>测试为中文标题和能否分类</p><hr><p>测试失败&gt;_&lt;<br>中文标题暂时用不了，不知道怎么改<br>分类应该没问题吧(maybe)<br>不想找了，功能将在6月期末考完后逐渐完善<br>简单来说就是先摆一会<br>打游戏去了</p><hr><p>nmmd，英语文档不能用空格是吧<br>嘶，分类功能好像也有问题用不了，淦</p><hr><p>破案了，分类功能导致上传出问题，不是不能用中文标题<br>唉，比想象的难多了</p><hr><p>之前的那个主题在手机上会出现严重的错误，于是换了一个<br>不知道这个怎么样<br>不够好像功能丢失了一些，还得接着研究</p><hr>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
